name: deploy-prod

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  ENV: prod
  ECR_REPOSITORY_NGINX: prod-lgtm-cat-api-nginx
  ECR_REPOSITORY_APP: prod-lgtm-cat-api-app

jobs:
  build:
    name: Build and Deploy to Production
    timeout-minutes: 25
    runs-on: ubuntu-24.04

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: "ap-northeast-1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR for nginx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/nginx/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }}
          platforms: linux/arm64
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

      - name: Build, tag, and push image to Amazon ECR for app
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          build-args: |
            COMMIT_HASH=${{ github.sha }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}
          platforms: linux/arm64
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app

      - name: Substitute environment variables in the Amazon ECS task definition
        run: envsubst < task-definition-${{ env.ENV }}.json  > task-definition.json
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Fill in the new image ID in the Amazon ECS task definition for nginx
        id: task-def-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nginx
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }}

      - name: Fill in the new image ID in the Amazon ECS task definition for app
        id: task-def-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
          container-name: app
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-app.outputs.task-definition }}
          wait-for-service-stability: true
          service: ${{ env.ENV }}-lgtm-cat-api
          cluster: ${{ env.ENV }}-lgtm-cat-api

      - name: Set release version
        id: release
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            RELEASE_VERSION="${GITHUB_REF_NAME}"
          else
            SAFE_REF_NAME=$(echo "${GITHUB_REF_NAME}" | tr '/\\' '-')
            RELEASE_VERSION="${SAFE_REF_NAME}-${GITHUB_SHA}"
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Create Sentry release
        if: success()
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: "lgtm-cat-api"
        with:
          environment: production
          release: ${{ env.RELEASE_VERSION }}
